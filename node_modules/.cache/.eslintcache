[{"/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/index.js":"1","/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/App.js":"2","/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/pages/LevelOne.js":"3","/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/pages/LevelThree.js":"4","/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/pages/TheGame.js":"5","/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/pages/Home.js":"6","/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/pages/LevelFive.js":"7","/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/pages/LevelTwo.js":"8","/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/components/Guess.js":"9","/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/components/Qwerty.js":"10","/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/stores/PuzzleStore.js":"11","/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/pages/LevelFour.js":"12"},{"size":357,"mtime":1684635004392,"results":"13","hashOfConfig":"14"},{"size":934,"mtime":1685937199913,"results":"15","hashOfConfig":"14"},{"size":35865,"mtime":1684696527043,"results":"16","hashOfConfig":"14"},{"size":2528,"mtime":1685925788676,"results":"17","hashOfConfig":"14"},{"size":4310,"mtime":1684693221995,"results":"18","hashOfConfig":"14"},{"size":13082,"mtime":1685996344095,"results":"19","hashOfConfig":"14"},{"size":4645,"mtime":1685945978176,"results":"20","hashOfConfig":"14"},{"size":6149,"mtime":1685997015270,"results":"21","hashOfConfig":"14"},{"size":800,"mtime":1685945091523,"results":"22","hashOfConfig":"14"},{"size":1117,"mtime":1684635004360,"results":"23","hashOfConfig":"14"},{"size":1843,"mtime":1684698848983,"results":"24","hashOfConfig":"14"},{"size":4817,"mtime":1685943294108,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"a4srgr",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"29"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"29"},"/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/index.js",[],[],[],"/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/App.js",[],[],"/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/pages/LevelOne.js",[],[],"/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/pages/LevelThree.js",[],[],"/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/pages/TheGame.js",[],[],"/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/pages/Home.js",["68","69"],[],"import React, { useEffect, useRef, useState } from 'react';\nimport { Parallax, ParallaxLayer } from '@react-spring/parallax';\nimport styles from '../styles.module.css';\nimport troll from '../images/troll.gif';\nimport pbj from '../images/pbj_time.gif';\nimport pbjMusic from '../images/pbj_time.mp3';\nimport { Link } from 'react-router-dom';\n\nfunction Home() {\n    const alignCenter = { display: 'flex', alignItems: 'center' };\n\n    const [angle, setAngle] = useState(0);\n\n    const [audioPlayed, setAudioPlayed] = useState(false);\n\n    const parallaxRef = useRef();\n\n    const clickImage = () => {\n        // console.log(parallaxRef);\n        if (!audioPlayed) {\n            const audio = new Audio(pbjMusic);\n            audio.play();\n            setAudioPlayed(true);\n        }\n    }\n\n    let gradient = `linear-gradient(${angle}deg, #511660, #064e40)`;\n\n    const onScroll = () => {\n        let scroll = parallaxRef.current.current / parallaxRef.current.space;\n        console.log(360 / (scroll + 1));\n        setAngle(360 / (scroll + 1));\n        gradient = `linear-gradient(${angle}deg, #511660, #064e40)`;\n    };\n\n    useEffect(() => {\n        if (!parallaxRef.current || !parallaxRef.current.container.current)\n            return;\n        parallaxRef.current.container.current.onscroll = onScroll;\n    }, []);\n\n    let bgStyle = {\n        position: 'absolute',\n        top: 0,\n        bottom: 0,\n        right: 0,\n        left: 0,\n        width: '100vw',\n        // height: '1000px',\n        background: gradient,\n    };\n\n    let textColor = {\n        color: 'white',\n        textAlign: 'center',\n    }\n\n    return (\n        <>\n            <div style={bgStyle} />\n            <Parallax pages={12} ref={parallaxRef}>\n                <ParallaxLayer\n                    offset={0.3}\n                    speed={0.5}\n                    style={{\n                        ...alignCenter,\n                        flexDirection: 'column',\n                        justifyContent: 'center',\n                    }}\n                >\n                    <br></br>\n                    <h2 style={{fontSize: 100, color: 'pink'}}>Hello Ananya \"Anyai\" Singh.</h2>\n                    <p className={styles.scrollText} style={textColor}>\n                        <p>\n                            I know you're probably wondering why I'm calling you\n                            by your full name.\n                        </p>\n                        <p>\n                            Well, it's because I'm a\n                            professional and I'm not going to call you by your\n                            nickname. I'm not your friend...\n                        </p>\n                        <p style={{fontSize: 50, color: 'red'}}>\n                            I'm your enemy. \n                        </p>\n                        <p> \n                            I know everything about you...<br></br>\n                            I know your favorite ice cream is Ben & Jerry's <span style={{color:'indianred', fontSize: 30}}>Phish Food</span>,<br></br>\n                            I know your favorite colors are <span style={{color:'green', fontSize: 30}}>forest green</span> and <span style={{color:'darkorchid', fontSize: 30}}>royal purple</span>,<br></br>\n                            I know you are a <span style={{color:'mediumvioletred', fontSize: 30}}>shopaholic</span>,<br></br>\n                            I know you are obsessed with <span style={{color:'lightblue', fontSize: 30}}>Harry Potter</span>,<br></br>\n                            I know you are a <span style={{color:'lightpink', fontSize: 30}}>dog person</span> (i hope),<br></br><br></br><br></br>\n                            and worst of all...<br></br><br></br>\n                            I know that you like to eat your own <br></br> <span style={{color:'lightgreen', fontSize: 60}}>BOOGERS</span>.<br></br><br></br>\n                            Like bruh, boogers? Really? That is so <span style={{color: '#D4D977', fontSize: 30}}>GROSS</span>.<br></br>\n                            I mean, I know you're a <span style={{color: '#D4D977', fontSize: 30}}>weirdo</span>, but that's just <span style={{color: '#D4D977', fontSize: 30}}>nasty</span>.<br></br><br></br>\n                            I'm also realizing now that there was no need for me to emphasize those last few words <br></br>\n                            but whatever, I'm too lazy to go back and fix it.<br></br>\n                            Well, maybe <span style={{color: '#D4D977', fontSize: 30}}>weirdo</span> should stay emphasized...<br></br>\n                        </p>\n                        <p>\n                            Anyways, feel free to scroll down or whatever.\n                        </p>    \n                    </p>\n                </ParallaxLayer>\n\n                <ParallaxLayer\n                    sticky={{ start: 1.5, end: 6 }}\n                    style={{\n                        ...alignCenter,\n                        justifyContent: 'flex-start',\n                    }}\n                >\n                    <div\n                        className={`${styles.pbj} ${styles.sticky}`}\n                        onClick={clickImage}\n                    >\n                        <img src={pbj} />\n                    </div>\n                </ParallaxLayer>\n\n                <ParallaxLayer\n                    offset={2}\n                    speed={1.5}\n                    style={{ \n                        ...alignCenter, \n                        justifyContent: 'flex-end' \n                    }}\n                >\n                    <div\n                        className={`${styles.card} ${styles.parallax} ${styles.purple}`}\n                    >\n                        <p style={{ color: 'white' }}>\n                            As you may have already noticed, there is the peanut\n                            butter jelly time guy on the left side of the page. <br></br>\n                            No matter how far you try to scroll away. <br></br>\n                            He will always be there, watching you,\n                            judging you, and reminding you that it is always\n                            peanut butter jelly time. Although, if you try clicking\n                            on him, you may be able to get him to go away...\n                        </p>\n                    </div>\n                </ParallaxLayer>\n\n                <ParallaxLayer\n                    offset={3}\n                    speed={1.5}\n                    style={{ \n                        ...alignCenter, \n                        justifyContent: 'flex-end' \n                    }}\n                >\n                    <div\n                        className={`${styles.card} ${styles.parallax} ${styles.black}`}\n                    >\n                        <p style={{ color: 'white', textAlign:'center' }}>\n                            <span style={{color:'red', fontSize: 30}}>\n                                MUAHAHAHAHAHAHAHAHAHA!\n                            </span><br></br>\n                            You really thought that would work?<br></br>\n                            You really thought that you could just click\n                            on him and he would go away? <br></br>\n                            You really thought that I would be that easy \n                            to get rid of?<br></br>\n                            <span style={{color:'red', fontSize: 30}}>\n                                You fool!\n                            </span><br></br>\n                            You have no idea what you've gotten yourself into.<br></br>\n                        </p>\n                    </div>\n                </ParallaxLayer>\n\n                <ParallaxLayer\n                    offset={4}\n                    speed={1.5}\n                    style={{ \n                        ...alignCenter, \n                        justifyContent: 'flex-end' \n                    }}\n                >\n                    <div\n                        className={`${styles.card} ${styles.parallax} ${styles.blue}`}\n                    >\n                        <p style={{ color: 'white' }}>\n                            I knew you would be unable to resist clicking on\n                            him. You poor soul. <br></br>\n                            I know probably didn't even see this\n                            coming. <br></br>\n                            You probably thought this was just a fun little\n                            website that I made for you. <br></br>\n                            Well, out of pity, I will give you a chance to\n                            escape. However, it will cost you... <br></br>\n\n                        </p>\n                    </div>\n                </ParallaxLayer>\n\n                <ParallaxLayer\n                    offset={5}\n                    speed={1.5}\n                    style={{ \n                        ...alignCenter, \n                        justifyContent: 'flex-end' \n                    }}\n                >\n                    <div\n                        className={`${styles.card} ${styles.parallax} ${styles.purple}`}\n                    >\n                        <p style={{ color: 'white' }}>\n                            All you have to do is keep scrolling, and I will\n                            let you go. <br></br>\n                            But if you scroll too far, you will be\n                            trapped here forever. <br></br>\n                            So, what will it be? <br></br>\n                            Will you keep scrolling? <br></br>\n                            Or will you give up and accept your  \n                            <span style={{color:'pink', fontSize: 30}}> FATE?</span><br></br>\n                        </p>\n                    </div>\n                </ParallaxLayer>\n\n                <ParallaxLayer\n                    offset={7}\n                    speed={1.5}\n                    style={{ \n                        ...alignCenter, \n                        justifyContent: 'center' \n                    }}\n                >\n                    <p style={{ color: 'white' }}>\n                        You really want to risk it, hmm?\n                    </p>\n                </ParallaxLayer>\n                <ParallaxLayer\n                    offset={8}\n                    speed={0.5}\n                    style={{ \n                        ...alignCenter, \n                        justifyContent: 'center' \n                    }}\n                >\n                    <h1 styles={{ color: 'white' }}>Ok then...</h1>\n                </ParallaxLayer>\n                <ParallaxLayer\n                    offset={9}\n                    speed={0.5}\n                    style={{\n                        backgroundImage: `url(${troll})`,\n                        backgroundSize: 'contain',\n                        backgroundRepeat: 'no-repeat',\n                        backgroundPosition: 'center',\n                        justifyContent: 'center'\n                    }}\n                >\n                    {/* <img src={troll} /> */}\n                </ParallaxLayer>\n                <ParallaxLayer\n                    offset={10}\n                    speed={1.5}\n                    style={{ \n                        ...alignCenter, \n                        justifyContent: 'center' \n                    }}\n                >\n                    <h1\n                        className={`${styles.scrollText}`}\n                        style={{ color: 'white' }}\n                    >\n                        TROLOLOLOLOLOLOLOLOL!!!!\n                    </h1>\n                </ParallaxLayer>\n                <ParallaxLayer\n                    offset={11}\n                    speed={1.5}\n                    style={{\n                        ...alignCenter,\n                        flexDirection: 'column',\n                        justifyContent: 'center',\n                    }}\n                >\n                    <p\n                        style={{\n                            color: 'white',\n                            textAlign: 'center',\n                            padding: '300px',\n                        }}\n                    >\n                        I warned you not to scroll too far down. But what did\n                        you do? You CHOSE not to listen, and now you got trolled. <br></br>\n                        I hope you're happy with yourself. <br></br>\n                        I hope you're happy with the choices you've made. <br></br>\n                        I hope you're happy with the life you've chosen to live because I wouldn't be. <br></br>\n                        Just click the button smh.\n                    </p>\n                    <Link to=\"/game\">\n                        <button className=\"learn-more\" color=\"#841584\">\n                            Click here to redeem yourself.\n                        </button>\n                    </Link>\n                </ParallaxLayer>\n            </Parallax>\n        </>\n    );\n}\n\nexport default Home;\n",[],"/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/pages/LevelFive.js",["70","71"],[],"import React, { useState, useEffect } from \"react\";\nimport \"./LevelFive.css\";\n\nconst LevelFive = () => {\n  const wordToGuess = \"DEEZ NUTS GOTEEM\".toLowerCase();\n  const [guesses, setGuesses] = useState([]);\n  const [correctGuesses, setCorrectGuesses] = useState(new Set());\n  const [wrongGuesses, setWrongGuesses] = useState(new Set());\n  const [remainingAttempts, setRemainingAttempts] = useState(6);\n  const [gameOver, setGameOver] = useState(false);\n  const [victory, setVictory] = useState(false);\n\n  useEffect(() => {\n    checkGameStatus();\n  }, [correctGuesses, remainingAttempts]);\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, []);\n\n  const handleGuess = (letter) => {\n    if (gameOver) return;\n    const normalizedLetter = letter.toLowerCase();\n\n    if (normalizedLetter === \" \" || guesses.includes(normalizedLetter)) {\n      return; // Skip spaces and already guessed letters\n    }\n\n    if (wordToGuess.includes(normalizedLetter)) {\n      setCorrectGuesses(new Set([...correctGuesses, normalizedLetter]));\n      checkGameStatus(); // Check game status after updating correctGuesses\n    } else {\n      setWrongGuesses(new Set([...wrongGuesses, normalizedLetter]));\n      setRemainingAttempts(remainingAttempts - 1);\n    }\n\n    setGuesses([...guesses, normalizedLetter]);\n  };\n\n  const handleKeyDown = (event) => {\n    const letter = event.key.toLowerCase();\n    if (/[a-z]/.test(letter)) {\n      handleGuess(letter);\n    }\n  };\n\n  const checkGameStatus = () => {\n    if (wrongGuesses.size >= 6) {\n      setGameOver(true);\n    }\n\n    const uniqueLettersInWord = new Set(wordToGuess.split(\"\"));\n    const guessedLetters = [...correctGuesses];\n    const guessedAllLetters = [...uniqueLettersInWord].every((letter) =>\n      guessedLetters.includes(letter)\n    );\n\n    if (guessedAllLetters) {\n      setVictory(true);\n    }\n  };\n\n  const renderWordToGuess = () => {\n    return wordToGuess.split(\"\").map((letter, index) => {\n      if (letter === \" \") {\n        return <span className=\"letter\" key={index}>  </span>; // Return an empty span for spaces\n      }\n      return (\n        <span className=\"letter\" key={index}>\n          {correctGuesses.has(letter) ? letter : \"_\"}\n        </span>\n      );\n    });\n  };\n\n  const renderAlphabetButtons = () => {\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    return alphabet.split(\"\").map((letter) => (\n      <button\n        className=\"letter-button\"\n        key={letter}\n        onClick={() => handleGuess(letter)}\n        disabled={guesses.includes(letter)}\n      >\n        {letter}\n      </button>\n    ));\n  };\n\n  const renderHangmanDrawing = () => {\n    const hangmanParts = [\n      // Head\n      wrongGuesses.size >= 1 && <circle cx=\"150\" cy=\"70\" r=\"20\" key=\"head\" />,\n      // Body\n      wrongGuesses.size >= 2 && <line x1=\"150\" y1=\"90\" x2=\"150\" y2=\"170\" key=\"body\" />,\n      // Left Arm\n      wrongGuesses.size >= 3 && <line x1=\"150\" y1=\"110\" x2=\"110\" y2=\"130\" key=\"left-arm\" />,\n      // Right Arm\n      wrongGuesses.size >= 4 && <line x1=\"150\" y1=\"110\" x2=\"190\" y2=\"130\" key=\"right-arm\" />,\n      // Left Leg\n      wrongGuesses.size >= 5 && <line x1=\"150\" y1=\"170\" x2=\"110\" y2=\"210\" key=\"left-leg\" />,\n      // Right Leg\n      wrongGuesses.size >= 6 && <line x1=\"150\" y1=\"170\" x2=\"190\" y2=\"210\" key=\"right-leg\" />,\n    ];\n\n    return (\n      <svg className=\"hangman-drawing\" viewBox=\"0 0 300 300\">\n        <circle cx=\"150\" cy=\"50\" r=\"30\" stroke=\"#f38381\" strokeWidth=\"2\" fill=\"none\" />\n        {hangmanParts}\n      </svg>\n    );\n  };\n\n  const renderGuessedLetters = () => {\n    const uniqueGuessedLetters = new Set([...correctGuesses, ...wrongGuesses]);\n    const guessedLetters = Array.from(uniqueGuessedLetters).join(\", \");\n    return (\n      <div className=\"guessed-letters\">\n        <span className=\"guessed-letters-label\">Guessed Letters:</span>\n        <span className=\"guessed-letters-list\">{guessedLetters}</span>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"hangman-container\">\n      <h1 className=\"hangman-title\">Hangman</h1>\n      <div className=\"hangman-word\">{renderWordToGuess()}</div>\n      <div className=\"hangman-alphabet\">{renderAlphabetButtons()}</div>\n      <div>{renderHangmanDrawing()}</div>\n      {renderGuessedLetters()}\n      {gameOver && <div className=\"hangman-message\">Game Over! The word was \"{wordToGuess}\"</div>}\n      {victory && (\n        <div className=\"hangman-victory\">\n          <h2 className=\"hangman-victory-text\">Congrats! You won!</h2>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LevelFive;\n","/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/pages/LevelTwo.js",[],[],"/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/components/Guess.js",[],[],"/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/components/Qwerty.js",[],[],"/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/stores/PuzzleStore.js",["72"],[],"export default {\n    word: '',\n    guesses: [],\n    currentGuess: 0,\n    get won() {\n        return this.guesses[this.currentGuess - 1] === this.word;\n    },\n    get lost() {\n        return this.currentGuess === 6;\n    },\n    get trace() {\n        return this.guesses[this.currentGuess - 1] === 'trace';\n    },\n    get allGuesses() {\n        return this.guesses.slice(0, this.currentGuess).join('').split('');\n    },\n    get exactGuesses() {\n        return (\n            this.word\n                .split('')\n                // if any guesses include this letter in this position/index\n                .filter((letter, i) => {\n                    return this.guesses\n                        .slice(0, this.currentGuess)\n                        .map((word) => word[i])\n                        .includes(letter);\n                })\n        );\n    },\n    get inexactGuesses() {\n        return this.word\n            .split('')\n            .filter((letter) => this.allGuesses.includes(letter));\n    },\n    init() {\n        this.word = 'anyai';\n        this.guesses.replace(new Array(6).fill(''));\n        this.currentGuess = 0;\n    },\n    submitGuess() {\n        this.currentGuess += 1;\n    },\n    handleKeyup(e) {\n        if (this.won || this.lost) {\n            return;\n        }\n\n        if (e.key === 'Enter') {\n            return this.submitGuess();\n        }\n        if (e.key === 'Backspace') {\n            this.guesses[this.currentGuess] = this.guesses[\n                this.currentGuess\n            ].slice(0, this.guesses[this.currentGuess].length - 1);\n            return;\n        }\n        if (\n            this.guesses[this.currentGuess].length < 5 &&\n            e.key.match(/^[A-z]$/)\n        ) {\n            this.guesses[this.currentGuess] =\n                this.guesses[this.currentGuess] + e.key.toLowerCase();\n        }\n    },\n};\n","/Users/ronak/Documents/GitHub/hbd-ananya-2023/src/pages/LevelFour.js",["73"],[],"import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./LevelFour.css\";\n\nfunction LevelFour() {\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [userIsNext, setUserIsNext] = useState(true);\n  const navigate = useNavigate(); // useNavigate hook\n\n  const handleClick = (i) => {\n    const boardCopy = [...board];\n    if (calculateWinner(boardCopy) || boardCopy[i]) return;\n    boardCopy[i] = userIsNext ? \"X\" : \"O\";\n    setBoard(boardCopy);\n    setUserIsNext(!userIsNext);\n  };\n\n  const restartGame = () => {\n    setBoard(Array(9).fill(null));\n    setUserIsNext(true);\n  };\n\n  useEffect(() => {\n    if (!userIsNext && !calculateWinner(board)) {\n      setTimeout(makeBestMove, 500);\n    }\n  }, [userIsNext]);\n\n  const makeBestMove = () => {\n    // Chance for the bot to make a mistake\n    const mistakeChance = 0.15; // 15% chance\n\n    if (Math.random() < mistakeChance) {\n      makeRandomMove();\n    } else {\n      let bestScore = -Infinity;\n      let move;\n      for (let i = 0; i < 9; i++) {\n        if (!board[i]) {\n          let newBoard = [...board];\n          newBoard[i] = \"O\";\n          let score = minimax(newBoard, 0, false);\n          if (score > bestScore) {\n            bestScore = score;\n            move = i;\n          }\n        }\n      }\n      handleClick(move);\n    }\n  };\n\n  const makeRandomMove = () => {\n    let availableMoves = [];\n    for (let i = 0; i < 9; i++) {\n      if (!board[i]) {\n        availableMoves.push(i);\n      }\n    }\n    if (availableMoves.length > 0) {\n      const randomMove =\n        availableMoves[Math.floor(Math.random() * availableMoves.length)];\n      handleClick(randomMove);\n    }\n  };\n\n  const minimax = (newBoard, depth, isMaximizing) => {\n    let winner = calculateWinner(newBoard);\n\n    if (winner !== null) {\n      if (winner === \"O\") {\n        return 10 - depth;\n      } else if (winner === \"X\") {\n        return depth - 10;\n      }\n      return 0; // Draw\n    }\n\n    // If there are no moves left and no winner then it is a draw\n    if (!newBoard.includes(null)) {\n      return 0;\n    }\n\n    if (isMaximizing) {\n      let bestScore = -Infinity;\n      for (let i = 0; i < 9; i++) {\n        if (!newBoard[i]) {\n          newBoard[i] = \"O\";\n          let score = minimax([...newBoard], depth + 1, false);\n          newBoard[i] = null;\n          bestScore = Math.max(score, bestScore);\n        }\n      }\n      return bestScore;\n    } else {\n      let bestScore = Infinity;\n      for (let i = 0; i < 9; i++) {\n        if (!newBoard[i]) {\n          newBoard[i] = \"X\";\n          let score = minimax([...newBoard], depth + 1, true);\n          newBoard[i] = null;\n          bestScore = Math.min(score, bestScore);\n        }\n      }\n      return bestScore;\n    }\n  };\n\n  const calculateWinner = (newBoard) => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        newBoard[a] &&\n        newBoard[a] === newBoard[b] &&\n        newBoard[a] === newBoard[c]\n      ) {\n        return newBoard[a];\n      }\n    }\n    return null;\n  };\n\n  const renderSquare = (i) => {\n    return (\n      <button className=\"square\" onClick={() => handleClick(i)}>\n        {board[i]}\n      </button>\n    );\n  };\n\n  const winner = calculateWinner(board);\n  let status;\n  if (winner) {\n    status = `Winner: ${winner}`;\n  } else if (!board.includes(null)) {\n    status = \"Draw!\";\n  } else {\n    status = `Next player: ${userIsNext ? \"X\" : \"O\"}`;\n  }\n\n  return (\n    <div className=\"level-four-container\">\n      <h1 className=\"level-four-title\">Level Four</h1>\n      <p className=\"level-four-description\">\n        <span style={{ color: \"#f38381\", fontWeight: \"bold\", fontSize: \"18px\" }}>\n          This is Level Four. Should be an easy one, just a simple Tic-Tac-Toe.\n          Good luck because you are not moving on until you are DONE!\n        </span>\n      </p>\n      <div className=\"status\">{status}</div>\n      <button className=\"restart-button\" onClick={restartGame}>\n        Restart Game\n      </button>\n      {winner === \"X\" && (\n        <button\n          className=\"next-level-button\"\n          onClick={() => navigate(\"/level-five\")}\n        >\n          Next Level\n        </button>\n      )}\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n}\n\nexport default LevelFour;\n",{"ruleId":"74","severity":1,"message":"75","line":40,"column":8,"nodeType":"76","endLine":40,"endColumn":10,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":118,"column":25,"nodeType":"80","endLine":118,"endColumn":42},{"ruleId":"74","severity":1,"message":"81","line":15,"column":6,"nodeType":"76","endLine":15,"endColumn":41,"suggestions":"82"},{"ruleId":"74","severity":1,"message":"83","line":22,"column":6,"nodeType":"76","endLine":22,"endColumn":8,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":1,"column":1,"nodeType":"87","endLine":65,"endColumn":3},{"ruleId":"74","severity":1,"message":"88","line":27,"column":6,"nodeType":"76","endLine":27,"endColumn":18,"suggestions":"89"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onScroll'. Either include it or remove the dependency array.","ArrayExpression",["90"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'checkGameStatus'. Either include it or remove the dependency array.",["91"],"React Hook useEffect has a missing dependency: 'handleKeyDown'. Either include it or remove the dependency array.",["92"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'board' and 'makeBestMove'. Either include them or remove the dependency array.",["93"],{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [onScroll]",{"range":"102","text":"103"},"Update the dependencies array to be: [checkGameStatus, correctGuesses, remainingAttempts]",{"range":"104","text":"105"},"Update the dependencies array to be: [handleKeyDown]",{"range":"106","text":"107"},"Update the dependencies array to be: [board, makeBestMove, userIsNext]",{"range":"108","text":"109"},[1311,1313],"[onScroll]",[551,586],"[checkGameStatus, correctGuesses, remainingAttempts]",[760,762],"[handleKeyDown]",[763,775],"[board, makeBestMove, userIsNext]"]